digraph G{
69[label="69 translation_unit_type(91):0:0"];
68[label="68 external_declaration_type(39):1:0"];
69->68;
68[label="68 external_declaration_type(39):1:0"];
67[label="67 declaration_type(22):1:0"];
68->67;
67[label="67 declaration_type(22):1:0"];
2[label="2 declaration_specifiers_type(21):3:0"];
67->2;
2[label="2 declaration_specifiers_type(21):3:0"];
0[label="0 type_specifier_type(95):3:0"];
2->0;
0[label="0 type_specifier_type(95):3:0"];
66[label="66 init_declarator_list_type(53):0:0"];
67->66;
66[label="66 init_declarator_list_type(53):0:0"];
65[label="65 init_declarator_type(54):0:0"];
66->65;
65[label="65 init_declarator_type(54):0:0"];
5[label="5 declarator_type(23):1:0"];
65->5;
5[label="5 declarator_type(23):1:0"];
4[label="4 direct_declarator_type(28):2:0"];
5->4;
4[label="4 direct_declarator_type(28):2:0"];
3[label="3 direct_declarator_type(28):0:0"];
4->3;
3[label="3 direct_declarator_type(28):0:0"];
1[label="1 not_know_type(0):-1:0:a"];
3->1;
1[label="1 not_know_type(0):-1:0:a"];
64[label="64 initializer_type(56):0:0"];
65->64;
64[label="64 initializer_type(56):0:0"];
25[label="25 initializer_list_type(55):1:0"];
64->25;
25[label="25 initializer_list_type(55):1:0"];
24[label="24 initializer_type(56):2:0"];
25->24;
24[label="24 initializer_type(56):2:0"];
23[label="23 assignment_expression_type(8):0:0"];
24->23;
23[label="23 assignment_expression_type(8):0:0"];
22[label="22 conditional_expression_type(15):0:0"];
23->22;
22[label="22 conditional_expression_type(15):0:0"];
21[label="21 logical_or_expression_type(62):0:0"];
22->21;
21[label="21 logical_or_expression_type(62):0:0"];
20[label="20 logical_and_expression_type(61):0:0"];
21->20;
20[label="20 logical_and_expression_type(61):0:0"];
19[label="19 inclusive_or_expression_type(52):0:0"];
20->19;
19[label="19 inclusive_or_expression_type(52):0:0"];
18[label="18 exclusive_or_expression_type(36):0:0"];
19->18;
18[label="18 exclusive_or_expression_type(36):0:0"];
17[label="17 and_expression_type(6):0:0"];
18->17;
17[label="17 and_expression_type(6):0:0"];
16[label="16 equality_expression_type(35):0:0"];
17->16;
16[label="16 equality_expression_type(35):0:0"];
15[label="15 relational_expression_type(74):0:0"];
16->15;
15[label="15 relational_expression_type(74):0:0"];
14[label="14 shift_expression_type(78):0:0"];
15->14;
14[label="14 shift_expression_type(78):0:0"];
13[label="13 additive_expression_type(4):0:0"];
14->13;
13[label="13 additive_expression_type(4):0:0"];
12[label="12 multiplicative_expression_type(65):0:0"];
13->12;
12[label="12 multiplicative_expression_type(65):0:0"];
11[label="11 cast_expression_type(13):0:0"];
12->11;
11[label="11 cast_expression_type(13):0:0"];
10[label="10 unary_expression_type(96):0:0"];
11->10;
10[label="10 unary_expression_type(96):0:0"];
9[label="9 postfix_expression_type(71):0:0"];
10->9;
9[label="9 postfix_expression_type(71):0:0"];
8[label="8 primary_expression_type(72):1:0"];
9->8;
8[label="8 primary_expression_type(72):1:0"];
7[label="7 constant_type(17):0:0"];
8->7;
7[label="7 constant_type(17):0:0"];
6[label="6 I_CONSTANT_type(48):-1:0:1"];
7->6;
6[label="6 I_CONSTANT_type(48):-1:0:1"];
44[label="44 initializer_type(56):2:0"];
25->44;
44[label="44 initializer_type(56):2:0"];
43[label="43 assignment_expression_type(8):0:0"];
44->43;
43[label="43 assignment_expression_type(8):0:0"];
42[label="42 conditional_expression_type(15):0:0"];
43->42;
42[label="42 conditional_expression_type(15):0:0"];
41[label="41 logical_or_expression_type(62):0:0"];
42->41;
41[label="41 logical_or_expression_type(62):0:0"];
40[label="40 logical_and_expression_type(61):0:0"];
41->40;
40[label="40 logical_and_expression_type(61):0:0"];
39[label="39 inclusive_or_expression_type(52):0:0"];
40->39;
39[label="39 inclusive_or_expression_type(52):0:0"];
38[label="38 exclusive_or_expression_type(36):0:0"];
39->38;
38[label="38 exclusive_or_expression_type(36):0:0"];
37[label="37 and_expression_type(6):0:0"];
38->37;
37[label="37 and_expression_type(6):0:0"];
36[label="36 equality_expression_type(35):0:0"];
37->36;
36[label="36 equality_expression_type(35):0:0"];
35[label="35 relational_expression_type(74):0:0"];
36->35;
35[label="35 relational_expression_type(74):0:0"];
34[label="34 shift_expression_type(78):0:0"];
35->34;
34[label="34 shift_expression_type(78):0:0"];
33[label="33 additive_expression_type(4):0:0"];
34->33;
33[label="33 additive_expression_type(4):0:0"];
32[label="32 multiplicative_expression_type(65):0:0"];
33->32;
32[label="32 multiplicative_expression_type(65):0:0"];
31[label="31 cast_expression_type(13):0:0"];
32->31;
31[label="31 cast_expression_type(13):0:0"];
30[label="30 unary_expression_type(96):0:0"];
31->30;
30[label="30 unary_expression_type(96):0:0"];
29[label="29 postfix_expression_type(71):0:0"];
30->29;
29[label="29 postfix_expression_type(71):0:0"];
28[label="28 primary_expression_type(72):1:0"];
29->28;
28[label="28 primary_expression_type(72):1:0"];
27[label="27 constant_type(17):0:0"];
28->27;
27[label="27 constant_type(17):0:0"];
26[label="26 I_CONSTANT_type(48):-1:0:2"];
27->26;
26[label="26 I_CONSTANT_type(48):-1:0:2"];
63[label="63 initializer_type(56):2:0"];
25->63;
63[label="63 initializer_type(56):2:0"];
62[label="62 assignment_expression_type(8):0:0"];
63->62;
62[label="62 assignment_expression_type(8):0:0"];
61[label="61 conditional_expression_type(15):0:0"];
62->61;
61[label="61 conditional_expression_type(15):0:0"];
60[label="60 logical_or_expression_type(62):0:0"];
61->60;
60[label="60 logical_or_expression_type(62):0:0"];
59[label="59 logical_and_expression_type(61):0:0"];
60->59;
59[label="59 logical_and_expression_type(61):0:0"];
58[label="58 inclusive_or_expression_type(52):0:0"];
59->58;
58[label="58 inclusive_or_expression_type(52):0:0"];
57[label="57 exclusive_or_expression_type(36):0:0"];
58->57;
57[label="57 exclusive_or_expression_type(36):0:0"];
56[label="56 and_expression_type(6):0:0"];
57->56;
56[label="56 and_expression_type(6):0:0"];
55[label="55 equality_expression_type(35):0:0"];
56->55;
55[label="55 equality_expression_type(35):0:0"];
54[label="54 relational_expression_type(74):0:0"];
55->54;
54[label="54 relational_expression_type(74):0:0"];
53[label="53 shift_expression_type(78):0:0"];
54->53;
53[label="53 shift_expression_type(78):0:0"];
52[label="52 additive_expression_type(4):0:0"];
53->52;
52[label="52 additive_expression_type(4):0:0"];
51[label="51 multiplicative_expression_type(65):0:0"];
52->51;
51[label="51 multiplicative_expression_type(65):0:0"];
50[label="50 cast_expression_type(13):0:0"];
51->50;
50[label="50 cast_expression_type(13):0:0"];
49[label="49 unary_expression_type(96):0:0"];
50->49;
49[label="49 unary_expression_type(96):0:0"];
48[label="48 postfix_expression_type(71):0:0"];
49->48;
48[label="48 postfix_expression_type(71):0:0"];
47[label="47 primary_expression_type(72):1:0"];
48->47;
47[label="47 primary_expression_type(72):1:0"];
46[label="46 constant_type(17):0:0"];
47->46;
46[label="46 constant_type(17):0:0"];
45[label="45 I_CONSTANT_type(48):-1:0:3"];
46->45;
45[label="45 I_CONSTANT_type(48):-1:0:3"];
}
