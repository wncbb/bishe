digraph G{
65[shape=box, label="65 translation_unit_type(91):0:0"];
64[shape=box, label="64 external_declaration_type(39):0:0"];
65->64;
64[shape=box, label="64 external_declaration_type(39):0:0"];
63[shape=box, label="63 function_definition_type(42):1:0"];
64->63;
63[shape=box, label="63 function_definition_type(42):1:0"];
2[shape=box, label="2 declaration_specifiers_type(21):3:0"];
63->2;
2[shape=box, label="2 declaration_specifiers_type(21):3:0"];
0[shape=box, label="0 type_specifier_type(95):3:0"];
2->0;
0[shape=box, label="0 type_specifier_type(95):3:0"];
5[shape=box, label="5 declarator_type(23):1:0"];
63->5;
5[shape=box, label="5 declarator_type(23):1:0"];
4[shape=box, label="4 direct_declarator_type(28):12:0"];
5->4;
4[shape=box, label="4 direct_declarator_type(28):12:0"];
3[shape=box, label="3 direct_declarator_type(28):0:0"];
4->3;
3[shape=box, label="3 direct_declarator_type(28):0:0"];
1[shape=box, label="1 IDENTIFIER_type(49):-1:0:funcaaa"];
3->1;
1[shape=box, label="1 IDENTIFIER_type(49):-1:0:funcaaa"];
62[shape=box, label="62 compound_statement_type(14):1:62"];
63->62;
62[shape=box, label="62 compound_statement_type(14):1:62"];
40[shape=box, label="40 block_item_list_type(11):0:62"];
62->40;
40[shape=box, label="40 block_item_list_type(11):0:62"];
39[shape=box, label="39 block_item_type(12):0:62"];
40->39;
39[shape=box, label="39 block_item_type(12):0:62"];
38[shape=box, label="38 declaration_type(22):1:62"];
39->38;
38[shape=box, label="38 declaration_type(22):1:62"];
8[shape=box, label="8 declaration_specifiers_type(21):3:62"];
38->8;
8[shape=box, label="8 declaration_specifiers_type(21):3:62"];
6[shape=box, label="6 type_specifier_type(95):3:62"];
8->6;
6[shape=box, label="6 type_specifier_type(95):3:62"];
37[shape=box, label="37 init_declarator_list_type(53):0:62"];
38->37;
37[shape=box, label="37 init_declarator_list_type(53):0:62"];
36[shape=box, label="36 init_declarator_type(54):0:62"];
37->36;
36[shape=box, label="36 init_declarator_type(54):0:62"];
10[shape=box, label="10 declarator_type(23):1:62"];
36->10;
10[shape=box, label="10 declarator_type(23):1:62"];
9[shape=box, label="9 direct_declarator_type(28):0:62"];
10->9;
9[shape=box, label="9 direct_declarator_type(28):0:62"];
7[shape=box, label="7 IDENTIFIER_type(49):-1:62:c"];
9->7;
7[shape=box, label="7 IDENTIFIER_type(49):-1:62:c"];
35[shape=box, label="35 initializer_type(56):2:62"];
36->35;
35[shape=box, label="35 initializer_type(56):2:62"];
34[shape=box, label="34 assignment_expression_type(8):0:62"];
35->34;
34[shape=box, label="34 assignment_expression_type(8):0:62"];
33[shape=box, label="33 conditional_expression_type(15):0:62"];
34->33;
33[shape=box, label="33 conditional_expression_type(15):0:62"];
32[shape=box, label="32 logical_or_expression_type(62):0:62"];
33->32;
32[shape=box, label="32 logical_or_expression_type(62):0:62"];
31[shape=box, label="31 logical_and_expression_type(61):0:62"];
32->31;
31[shape=box, label="31 logical_and_expression_type(61):0:62"];
30[shape=box, label="30 inclusive_or_expression_type(52):0:62"];
31->30;
30[shape=box, label="30 inclusive_or_expression_type(52):0:62"];
29[shape=box, label="29 exclusive_or_expression_type(36):0:62"];
30->29;
29[shape=box, label="29 exclusive_or_expression_type(36):0:62"];
28[shape=box, label="28 and_expression_type(6):0:62"];
29->28;
28[shape=box, label="28 and_expression_type(6):0:62"];
27[shape=box, label="27 equality_expression_type(35):0:62"];
28->27;
27[shape=box, label="27 equality_expression_type(35):0:62"];
26[shape=box, label="26 relational_expression_type(74):0:62"];
27->26;
26[shape=box, label="26 relational_expression_type(74):0:62"];
25[shape=box, label="25 shift_expression_type(78):0:62"];
26->25;
25[shape=box, label="25 shift_expression_type(78):0:62"];
24[shape=box, label="24 additive_expression_type(4):1:62"];
25->24;
24[shape=box, label="24 additive_expression_type(4):1:62"];
17[shape=box, label="17 additive_expression_type(4):0:62"];
24->17;
17[shape=box, label="17 additive_expression_type(4):0:62"];
16[shape=box, label="16 multiplicative_expression_type(65):0:62"];
17->16;
16[shape=box, label="16 multiplicative_expression_type(65):0:62"];
15[shape=box, label="15 cast_expression_type(13):0:62"];
16->15;
15[shape=box, label="15 cast_expression_type(13):0:62"];
14[shape=box, label="14 unary_expression_type(96):0:62"];
15->14;
14[shape=box, label="14 unary_expression_type(96):0:62"];
13[shape=box, label="13 postfix_expression_type(71):0:62"];
14->13;
13[shape=box, label="13 postfix_expression_type(71):0:62"];
12[shape=box, label="12 primary_expression_type(72):0:62"];
13->12;
12[shape=box, label="12 primary_expression_type(72):0:62"];
11[shape=box, label="11 IDENTIFIER_type(49):-1:62:a"];
12->11;
11[shape=box, label="11 IDENTIFIER_type(49):-1:62:a"];
23[shape=box, label="23 multiplicative_expression_type(65):0:62"];
24->23;
23[shape=box, label="23 multiplicative_expression_type(65):0:62"];
22[shape=box, label="22 cast_expression_type(13):0:62"];
23->22;
22[shape=box, label="22 cast_expression_type(13):0:62"];
21[shape=box, label="21 unary_expression_type(96):0:62"];
22->21;
21[shape=box, label="21 unary_expression_type(96):0:62"];
20[shape=box, label="20 postfix_expression_type(71):0:62"];
21->20;
20[shape=box, label="20 postfix_expression_type(71):0:62"];
19[shape=box, label="19 primary_expression_type(72):0:62"];
20->19;
19[shape=box, label="19 primary_expression_type(72):0:62"];
18[shape=box, label="18 IDENTIFIER_type(49):-1:62:b"];
19->18;
18[shape=box, label="18 IDENTIFIER_type(49):-1:62:b"];
61[shape=box, label="61 block_item_type(12):1:62"];
40->61;
61[shape=box, label="61 block_item_type(12):1:62"];
60[shape=box, label="60 statement_type(80):5:62"];
61->60;
60[shape=box, label="60 statement_type(80):5:62"];
59[shape=box, label="59 jump_statement_type(58):4:62"];
60->59;
59[shape=box, label="59 jump_statement_type(58):4:62"];
58[shape=box, label="58 expression_type(38):0:62"];
59->58;
58[shape=box, label="58 expression_type(38):0:62"];
57[shape=box, label="57 assignment_expression_type(8):0:62"];
58->57;
57[shape=box, label="57 assignment_expression_type(8):0:62"];
56[shape=box, label="56 conditional_expression_type(15):0:62"];
57->56;
56[shape=box, label="56 conditional_expression_type(15):0:62"];
55[shape=box, label="55 logical_or_expression_type(62):0:62"];
56->55;
55[shape=box, label="55 logical_or_expression_type(62):0:62"];
54[shape=box, label="54 logical_and_expression_type(61):0:62"];
55->54;
54[shape=box, label="54 logical_and_expression_type(61):0:62"];
53[shape=box, label="53 inclusive_or_expression_type(52):0:62"];
54->53;
53[shape=box, label="53 inclusive_or_expression_type(52):0:62"];
52[shape=box, label="52 exclusive_or_expression_type(36):0:62"];
53->52;
52[shape=box, label="52 exclusive_or_expression_type(36):0:62"];
51[shape=box, label="51 and_expression_type(6):0:62"];
52->51;
51[shape=box, label="51 and_expression_type(6):0:62"];
50[shape=box, label="50 equality_expression_type(35):0:62"];
51->50;
50[shape=box, label="50 equality_expression_type(35):0:62"];
49[shape=box, label="49 relational_expression_type(74):0:62"];
50->49;
49[shape=box, label="49 relational_expression_type(74):0:62"];
48[shape=box, label="48 shift_expression_type(78):0:62"];
49->48;
48[shape=box, label="48 shift_expression_type(78):0:62"];
47[shape=box, label="47 additive_expression_type(4):0:62"];
48->47;
47[shape=box, label="47 additive_expression_type(4):0:62"];
46[shape=box, label="46 multiplicative_expression_type(65):0:62"];
47->46;
46[shape=box, label="46 multiplicative_expression_type(65):0:62"];
45[shape=box, label="45 cast_expression_type(13):0:62"];
46->45;
45[shape=box, label="45 cast_expression_type(13):0:62"];
44[shape=box, label="44 unary_expression_type(96):0:62"];
45->44;
44[shape=box, label="44 unary_expression_type(96):0:62"];
43[shape=box, label="43 postfix_expression_type(71):0:62"];
44->43;
43[shape=box, label="43 postfix_expression_type(71):0:62"];
42[shape=box, label="42 primary_expression_type(72):0:62"];
43->42;
42[shape=box, label="42 primary_expression_type(72):0:62"];
41[shape=box, label="41 IDENTIFIER_type(49):-1:62:c"];
42->41;
41[shape=box, label="41 IDENTIFIER_type(49):-1:62:c"];
144[shape=box, label="144 external_declaration_type(39):0:0"];
65->144;
144[shape=box, label="144 external_declaration_type(39):0:0"];
143[shape=box, label="143 function_definition_type(42):1:0"];
144->143;
143[shape=box, label="143 function_definition_type(42):1:0"];
68[shape=box, label="68 declaration_specifiers_type(21):3:0"];
143->68;
68[shape=box, label="68 declaration_specifiers_type(21):3:0"];
66[shape=box, label="66 type_specifier_type(95):3:0"];
68->66;
66[shape=box, label="66 type_specifier_type(95):3:0"];
85[shape=box, label="85 declarator_type(23):1:0"];
143->85;
85[shape=box, label="85 declarator_type(23):1:0"];
84[shape=box, label="84 direct_declarator_type(28):11:0"];
85->84;
84[shape=box, label="84 direct_declarator_type(28):11:0"];
69[shape=box, label="69 direct_declarator_type(28):0:0"];
84->69;
69[shape=box, label="69 direct_declarator_type(28):0:0"];
67[shape=box, label="67 IDENTIFIER_type(49):-1:0:funcbbb"];
69->67;
67[shape=box, label="67 IDENTIFIER_type(49):-1:0:funcbbb"];
83[shape=box, label="83 parameter_type_list_type(69):1:0"];
84->83;
83[shape=box, label="83 parameter_type_list_type(69):1:0"];
76[shape=box, label="76 parameter_list_type(68):0:0"];
83->76;
76[shape=box, label="76 parameter_list_type(68):0:0"];
75[shape=box, label="75 parameter_declaration_type(67):0:0"];
76->75;
75[shape=box, label="75 parameter_declaration_type(67):0:0"];
72[shape=box, label="72 declaration_specifiers_type(21):3:0"];
75->72;
72[shape=box, label="72 declaration_specifiers_type(21):3:0"];
70[shape=box, label="70 type_specifier_type(95):3:0"];
72->70;
70[shape=box, label="70 type_specifier_type(95):3:0"];
74[shape=box, label="74 declarator_type(23):1:0"];
75->74;
74[shape=box, label="74 declarator_type(23):1:0"];
73[shape=box, label="73 direct_declarator_type(28):0:0"];
74->73;
73[shape=box, label="73 direct_declarator_type(28):0:0"];
71[shape=box, label="71 IDENTIFIER_type(49):-1:0:a2"];
73->71;
71[shape=box, label="71 IDENTIFIER_type(49):-1:0:a2"];
82[shape=box, label="82 parameter_declaration_type(67):0:0"];
76->82;
82[shape=box, label="82 parameter_declaration_type(67):0:0"];
79[shape=box, label="79 declaration_specifiers_type(21):3:0"];
82->79;
79[shape=box, label="79 declaration_specifiers_type(21):3:0"];
77[shape=box, label="77 type_specifier_type(95):3:0"];
79->77;
77[shape=box, label="77 type_specifier_type(95):3:0"];
81[shape=box, label="81 declarator_type(23):1:0"];
82->81;
81[shape=box, label="81 declarator_type(23):1:0"];
80[shape=box, label="80 direct_declarator_type(28):0:0"];
81->80;
80[shape=box, label="80 direct_declarator_type(28):0:0"];
78[shape=box, label="78 IDENTIFIER_type(49):-1:0:b2"];
80->78;
78[shape=box, label="78 IDENTIFIER_type(49):-1:0:b2"];
142[shape=box, label="142 compound_statement_type(14):1:142"];
143->142;
142[shape=box, label="142 compound_statement_type(14):1:142"];
120[shape=box, label="120 block_item_list_type(11):0:142"];
142->120;
120[shape=box, label="120 block_item_list_type(11):0:142"];
119[shape=box, label="119 block_item_type(12):0:142"];
120->119;
119[shape=box, label="119 block_item_type(12):0:142"];
118[shape=box, label="118 declaration_type(22):1:142"];
119->118;
118[shape=box, label="118 declaration_type(22):1:142"];
88[shape=box, label="88 declaration_specifiers_type(21):3:142"];
118->88;
88[shape=box, label="88 declaration_specifiers_type(21):3:142"];
86[shape=box, label="86 type_specifier_type(95):3:142"];
88->86;
86[shape=box, label="86 type_specifier_type(95):3:142"];
117[shape=box, label="117 init_declarator_list_type(53):0:142"];
118->117;
117[shape=box, label="117 init_declarator_list_type(53):0:142"];
116[shape=box, label="116 init_declarator_type(54):0:142"];
117->116;
116[shape=box, label="116 init_declarator_type(54):0:142"];
90[shape=box, label="90 declarator_type(23):1:142"];
116->90;
90[shape=box, label="90 declarator_type(23):1:142"];
89[shape=box, label="89 direct_declarator_type(28):0:142"];
90->89;
89[shape=box, label="89 direct_declarator_type(28):0:142"];
87[shape=box, label="87 IDENTIFIER_type(49):-1:142:c2"];
89->87;
87[shape=box, label="87 IDENTIFIER_type(49):-1:142:c2"];
115[shape=box, label="115 initializer_type(56):2:142"];
116->115;
115[shape=box, label="115 initializer_type(56):2:142"];
114[shape=box, label="114 assignment_expression_type(8):0:142"];
115->114;
114[shape=box, label="114 assignment_expression_type(8):0:142"];
113[shape=box, label="113 conditional_expression_type(15):0:142"];
114->113;
113[shape=box, label="113 conditional_expression_type(15):0:142"];
112[shape=box, label="112 logical_or_expression_type(62):0:142"];
113->112;
112[shape=box, label="112 logical_or_expression_type(62):0:142"];
111[shape=box, label="111 logical_and_expression_type(61):0:142"];
112->111;
111[shape=box, label="111 logical_and_expression_type(61):0:142"];
110[shape=box, label="110 inclusive_or_expression_type(52):0:142"];
111->110;
110[shape=box, label="110 inclusive_or_expression_type(52):0:142"];
109[shape=box, label="109 exclusive_or_expression_type(36):0:142"];
110->109;
109[shape=box, label="109 exclusive_or_expression_type(36):0:142"];
108[shape=box, label="108 and_expression_type(6):0:142"];
109->108;
108[shape=box, label="108 and_expression_type(6):0:142"];
107[shape=box, label="107 equality_expression_type(35):0:142"];
108->107;
107[shape=box, label="107 equality_expression_type(35):0:142"];
106[shape=box, label="106 relational_expression_type(74):0:142"];
107->106;
106[shape=box, label="106 relational_expression_type(74):0:142"];
105[shape=box, label="105 shift_expression_type(78):0:142"];
106->105;
105[shape=box, label="105 shift_expression_type(78):0:142"];
104[shape=box, label="104 additive_expression_type(4):1:142"];
105->104;
104[shape=box, label="104 additive_expression_type(4):1:142"];
97[shape=box, label="97 additive_expression_type(4):0:142"];
104->97;
97[shape=box, label="97 additive_expression_type(4):0:142"];
96[shape=box, label="96 multiplicative_expression_type(65):0:142"];
97->96;
96[shape=box, label="96 multiplicative_expression_type(65):0:142"];
95[shape=box, label="95 cast_expression_type(13):0:142"];
96->95;
95[shape=box, label="95 cast_expression_type(13):0:142"];
94[shape=box, label="94 unary_expression_type(96):0:142"];
95->94;
94[shape=box, label="94 unary_expression_type(96):0:142"];
93[shape=box, label="93 postfix_expression_type(71):0:142"];
94->93;
93[shape=box, label="93 postfix_expression_type(71):0:142"];
92[shape=box, label="92 primary_expression_type(72):0:142"];
93->92;
92[shape=box, label="92 primary_expression_type(72):0:142"];
91[shape=box, label="91 IDENTIFIER_type(49):-1:142:a2"];
92->91;
91[shape=box, label="91 IDENTIFIER_type(49):-1:142:a2"];
103[shape=box, label="103 multiplicative_expression_type(65):0:142"];
104->103;
103[shape=box, label="103 multiplicative_expression_type(65):0:142"];
102[shape=box, label="102 cast_expression_type(13):0:142"];
103->102;
102[shape=box, label="102 cast_expression_type(13):0:142"];
101[shape=box, label="101 unary_expression_type(96):0:142"];
102->101;
101[shape=box, label="101 unary_expression_type(96):0:142"];
100[shape=box, label="100 postfix_expression_type(71):0:142"];
101->100;
100[shape=box, label="100 postfix_expression_type(71):0:142"];
99[shape=box, label="99 primary_expression_type(72):0:142"];
100->99;
99[shape=box, label="99 primary_expression_type(72):0:142"];
98[shape=box, label="98 IDENTIFIER_type(49):-1:142:b2"];
99->98;
98[shape=box, label="98 IDENTIFIER_type(49):-1:142:b2"];
141[shape=box, label="141 block_item_type(12):1:142"];
120->141;
141[shape=box, label="141 block_item_type(12):1:142"];
140[shape=box, label="140 statement_type(80):5:142"];
141->140;
140[shape=box, label="140 statement_type(80):5:142"];
139[shape=box, label="139 jump_statement_type(58):4:142"];
140->139;
139[shape=box, label="139 jump_statement_type(58):4:142"];
138[shape=box, label="138 expression_type(38):0:142"];
139->138;
138[shape=box, label="138 expression_type(38):0:142"];
137[shape=box, label="137 assignment_expression_type(8):0:142"];
138->137;
137[shape=box, label="137 assignment_expression_type(8):0:142"];
136[shape=box, label="136 conditional_expression_type(15):0:142"];
137->136;
136[shape=box, label="136 conditional_expression_type(15):0:142"];
135[shape=box, label="135 logical_or_expression_type(62):0:142"];
136->135;
135[shape=box, label="135 logical_or_expression_type(62):0:142"];
134[shape=box, label="134 logical_and_expression_type(61):0:142"];
135->134;
134[shape=box, label="134 logical_and_expression_type(61):0:142"];
133[shape=box, label="133 inclusive_or_expression_type(52):0:142"];
134->133;
133[shape=box, label="133 inclusive_or_expression_type(52):0:142"];
132[shape=box, label="132 exclusive_or_expression_type(36):0:142"];
133->132;
132[shape=box, label="132 exclusive_or_expression_type(36):0:142"];
131[shape=box, label="131 and_expression_type(6):0:142"];
132->131;
131[shape=box, label="131 and_expression_type(6):0:142"];
130[shape=box, label="130 equality_expression_type(35):0:142"];
131->130;
130[shape=box, label="130 equality_expression_type(35):0:142"];
129[shape=box, label="129 relational_expression_type(74):0:142"];
130->129;
129[shape=box, label="129 relational_expression_type(74):0:142"];
128[shape=box, label="128 shift_expression_type(78):0:142"];
129->128;
128[shape=box, label="128 shift_expression_type(78):0:142"];
127[shape=box, label="127 additive_expression_type(4):0:142"];
128->127;
127[shape=box, label="127 additive_expression_type(4):0:142"];
126[shape=box, label="126 multiplicative_expression_type(65):0:142"];
127->126;
126[shape=box, label="126 multiplicative_expression_type(65):0:142"];
125[shape=box, label="125 cast_expression_type(13):0:142"];
126->125;
125[shape=box, label="125 cast_expression_type(13):0:142"];
124[shape=box, label="124 unary_expression_type(96):0:142"];
125->124;
124[shape=box, label="124 unary_expression_type(96):0:142"];
123[shape=box, label="123 postfix_expression_type(71):0:142"];
124->123;
123[shape=box, label="123 postfix_expression_type(71):0:142"];
122[shape=box, label="122 primary_expression_type(72):0:142"];
123->122;
122[shape=box, label="122 primary_expression_type(72):0:142"];
121[shape=box, label="121 IDENTIFIER_type(49):-1:142:c2"];
122->121;
121[shape=box, label="121 IDENTIFIER_type(49):-1:142:c2"];
}
