digraph G{
75[label="75 translation_unit_type(91):0:0"];
74[label="74 external_declaration_type(39):0:0"];
75->74;
74[label="74 external_declaration_type(39):0:0"];
73[label="73 function_definition_type(42):1:0"];
74->73;
73[label="73 function_definition_type(42):1:0"];
2[label="2 declaration_specifiers_type(21):3:0"];
73->2;
2[label="2 declaration_specifiers_type(21):3:0"];
0[label="0 type_specifier_type(95):3:0"];
2->0;
0[label="0 type_specifier_type(95):3:0"];
5[label="5 declarator_type(23):1:0"];
73->5;
5[label="5 declarator_type(23):1:0"];
4[label="4 direct_declarator_type(28):12:0"];
5->4;
4[label="4 direct_declarator_type(28):12:0"];
3[label="3 direct_declarator_type(28):0:0"];
4->3;
3[label="3 direct_declarator_type(28):0:0"];
1[label="1 not_know_type(0):-1:0:main"];
3->1;
1[label="1 not_know_type(0):-1:0:main"];
72[label="72 compound_statement_type(14):1:72"];
73->72;
72[label="72 compound_statement_type(14):1:72"];
71[label="71 block_item_list_type(11):0:72"];
72->71;
71[label="71 block_item_list_type(11):0:72"];
70[label="70 block_item_type(12):0:72"];
71->70;
70[label="70 block_item_type(12):0:72"];
69[label="69 declaration_type(22):1:72"];
70->69;
69[label="69 declaration_type(22):1:72"];
8[label="8 declaration_specifiers_type(21):3:72"];
69->8;
8[label="8 declaration_specifiers_type(21):3:72"];
6[label="6 type_specifier_type(95):3:72"];
8->6;
6[label="6 type_specifier_type(95):3:72"];
68[label="68 init_declarator_list_type(53):0:72"];
69->68;
68[label="68 init_declarator_list_type(53):0:72"];
67[label="67 init_declarator_type(54):0:72"];
68->67;
67[label="67 init_declarator_type(54):0:72"];
10[label="10 declarator_type(23):1:72"];
67->10;
10[label="10 declarator_type(23):1:72"];
9[label="9 direct_declarator_type(28):0:72"];
10->9;
9[label="9 direct_declarator_type(28):0:72"];
7[label="7 not_know_type(0):-1:72:a"];
9->7;
7[label="7 not_know_type(0):-1:72:a"];
66[label="66 initializer_type(56):2:72"];
67->66;
66[label="66 initializer_type(56):2:72"];
65[label="65 assignment_expression_type(8):0:72"];
66->65;
65[label="65 assignment_expression_type(8):0:72"];
64[label="64 conditional_expression_type(15):0:72"];
65->64;
64[label="64 conditional_expression_type(15):0:72"];
63[label="63 logical_or_expression_type(62):0:72"];
64->63;
63[label="63 logical_or_expression_type(62):0:72"];
62[label="62 logical_and_expression_type(61):0:72"];
63->62;
62[label="62 logical_and_expression_type(61):0:72"];
61[label="61 inclusive_or_expression_type(52):0:72"];
62->61;
61[label="61 inclusive_or_expression_type(52):0:72"];
60[label="60 exclusive_or_expression_type(36):0:72"];
61->60;
60[label="60 exclusive_or_expression_type(36):0:72"];
59[label="59 and_expression_type(6):0:72"];
60->59;
59[label="59 and_expression_type(6):0:72"];
58[label="58 equality_expression_type(35):0:72"];
59->58;
58[label="58 equality_expression_type(35):0:72"];
57[label="57 relational_expression_type(74):0:72"];
58->57;
57[label="57 relational_expression_type(74):0:72"];
56[label="56 shift_expression_type(78):0:72"];
57->56;
56[label="56 shift_expression_type(78):0:72"];
55[label="55 additive_expression_type(4):0:72"];
56->55;
55[label="55 additive_expression_type(4):0:72"];
54[label="54 multiplicative_expression_type(65):0:72"];
55->54;
54[label="54 multiplicative_expression_type(65):0:72"];
53[label="53 cast_expression_type(13):0:72"];
54->53;
53[label="53 cast_expression_type(13):0:72"];
52[label="52 unary_expression_type(96):0:72"];
53->52;
52[label="52 unary_expression_type(96):0:72"];
51[label="51 postfix_expression_type(71):3:72"];
52->51;
51[label="51 postfix_expression_type(71):3:72"];
13[label="13 postfix_expression_type(71):0:72"];
51->13;
13[label="13 postfix_expression_type(71):0:72"];
12[label="12 primary_expression_type(72):0:72"];
13->12;
12[label="12 primary_expression_type(72):0:72"];
11[label="11 not_know_type(0):-1:72:func"];
12->11;
11[label="11 not_know_type(0):-1:72:func"];
32[label="32 argument_expression_list_type(7):0:72"];
51->32;
32[label="32 argument_expression_list_type(7):0:72"];
31[label="31 assignment_expression_type(8):0:72"];
32->31;
31[label="31 assignment_expression_type(8):0:72"];
30[label="30 conditional_expression_type(15):0:72"];
31->30;
30[label="30 conditional_expression_type(15):0:72"];
29[label="29 logical_or_expression_type(62):0:72"];
30->29;
29[label="29 logical_or_expression_type(62):0:72"];
28[label="28 logical_and_expression_type(61):0:72"];
29->28;
28[label="28 logical_and_expression_type(61):0:72"];
27[label="27 inclusive_or_expression_type(52):0:72"];
28->27;
27[label="27 inclusive_or_expression_type(52):0:72"];
26[label="26 exclusive_or_expression_type(36):0:72"];
27->26;
26[label="26 exclusive_or_expression_type(36):0:72"];
25[label="25 and_expression_type(6):0:72"];
26->25;
25[label="25 and_expression_type(6):0:72"];
24[label="24 equality_expression_type(35):0:72"];
25->24;
24[label="24 equality_expression_type(35):0:72"];
23[label="23 relational_expression_type(74):0:72"];
24->23;
23[label="23 relational_expression_type(74):0:72"];
22[label="22 shift_expression_type(78):0:72"];
23->22;
22[label="22 shift_expression_type(78):0:72"];
21[label="21 additive_expression_type(4):0:72"];
22->21;
21[label="21 additive_expression_type(4):0:72"];
20[label="20 multiplicative_expression_type(65):0:72"];
21->20;
20[label="20 multiplicative_expression_type(65):0:72"];
19[label="19 cast_expression_type(13):0:72"];
20->19;
19[label="19 cast_expression_type(13):0:72"];
18[label="18 unary_expression_type(96):0:72"];
19->18;
18[label="18 unary_expression_type(96):0:72"];
17[label="17 postfix_expression_type(71):0:72"];
18->17;
17[label="17 postfix_expression_type(71):0:72"];
16[label="16 primary_expression_type(72):1:72"];
17->16;
16[label="16 primary_expression_type(72):1:72"];
15[label="15 constant_type(17):0:72"];
16->15;
15[label="15 constant_type(17):0:72"];
14[label="14 I_CONSTANT_type(48):-1:72:12"];
15->14;
14[label="14 I_CONSTANT_type(48):-1:72:12"];
50[label="50 assignment_expression_type(8):0:72"];
32->50;
50[label="50 assignment_expression_type(8):0:72"];
49[label="49 conditional_expression_type(15):0:72"];
50->49;
49[label="49 conditional_expression_type(15):0:72"];
48[label="48 logical_or_expression_type(62):0:72"];
49->48;
48[label="48 logical_or_expression_type(62):0:72"];
47[label="47 logical_and_expression_type(61):0:72"];
48->47;
47[label="47 logical_and_expression_type(61):0:72"];
46[label="46 inclusive_or_expression_type(52):0:72"];
47->46;
46[label="46 inclusive_or_expression_type(52):0:72"];
45[label="45 exclusive_or_expression_type(36):0:72"];
46->45;
45[label="45 exclusive_or_expression_type(36):0:72"];
44[label="44 and_expression_type(6):0:72"];
45->44;
44[label="44 and_expression_type(6):0:72"];
43[label="43 equality_expression_type(35):0:72"];
44->43;
43[label="43 equality_expression_type(35):0:72"];
42[label="42 relational_expression_type(74):0:72"];
43->42;
42[label="42 relational_expression_type(74):0:72"];
41[label="41 shift_expression_type(78):0:72"];
42->41;
41[label="41 shift_expression_type(78):0:72"];
40[label="40 additive_expression_type(4):0:72"];
41->40;
40[label="40 additive_expression_type(4):0:72"];
39[label="39 multiplicative_expression_type(65):0:72"];
40->39;
39[label="39 multiplicative_expression_type(65):0:72"];
38[label="38 cast_expression_type(13):0:72"];
39->38;
38[label="38 cast_expression_type(13):0:72"];
37[label="37 unary_expression_type(96):0:72"];
38->37;
37[label="37 unary_expression_type(96):0:72"];
36[label="36 postfix_expression_type(71):0:72"];
37->36;
36[label="36 postfix_expression_type(71):0:72"];
35[label="35 primary_expression_type(72):1:72"];
36->35;
35[label="35 primary_expression_type(72):1:72"];
34[label="34 constant_type(17):0:72"];
35->34;
34[label="34 constant_type(17):0:72"];
33[label="33 I_CONSTANT_type(48):-1:72:13"];
34->33;
33[label="33 I_CONSTANT_type(48):-1:72:13"];
}
