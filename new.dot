digraph G{
89[label="89 translation_unit_type(91):0:0"];
88[label="88 external_declaration_type(39):0:0"];
89->88;
88[label="88 external_declaration_type(39):0:0"];
87[label="87 function_definition_type(42):1:0"];
88->87;
87[label="87 function_definition_type(42):1:0"];
3[label="3 declaration_specifiers_type(21):3:0"];
87->3;
3[label="3 declaration_specifiers_type(21):3:0"];
0[label="0 type_specifier_type(95):8:0"];
3->0;
0[label="0 type_specifier_type(95):8:0"];
1[label="1 type_specifier_type(95):1:0"];
3->1;
1[label="1 type_specifier_type(95):1:0"];
6[label="6 declarator_type(23):1:0"];
87->6;
6[label="6 declarator_type(23):1:0"];
5[label="5 direct_declarator_type(28):12:0"];
6->5;
5[label="5 direct_declarator_type(28):12:0"];
4[label="4 direct_declarator_type(28):0:0"];
5->4;
4[label="4 direct_declarator_type(28):0:0"];
2[label="2 not_know_type(0):-1:0:main"];
4->2;
2[label="2 not_know_type(0):-1:0:main"];
86[label="86 compound_statement_type(14):1:86"];
87->86;
86[label="86 compound_statement_type(14):1:86"];
35[label="35 block_item_list_type(11):0:86"];
86->35;
35[label="35 block_item_list_type(11):0:86"];
34[label="34 block_item_type(12):0:86"];
35->34;
34[label="34 block_item_type(12):0:86"];
33[label="33 declaration_type(22):1:86"];
34->33;
33[label="33 declaration_type(22):1:86"];
9[label="9 declaration_specifiers_type(21):3:86"];
33->9;
9[label="9 declaration_specifiers_type(21):3:86"];
7[label="7 type_specifier_type(95):8:86"];
9->7;
7[label="7 type_specifier_type(95):8:86"];
32[label="32 init_declarator_list_type(53):0:86"];
33->32;
32[label="32 init_declarator_list_type(53):0:86"];
31[label="31 init_declarator_type(54):0:86"];
32->31;
31[label="31 init_declarator_type(54):0:86"];
11[label="11 declarator_type(23):1:86"];
31->11;
11[label="11 declarator_type(23):1:86"];
10[label="10 direct_declarator_type(28):0:86"];
11->10;
10[label="10 direct_declarator_type(28):0:86"];
8[label="8 not_know_type(0):-1:86:a"];
10->8;
8[label="8 not_know_type(0):-1:86:a"];
30[label="30 initializer_type(56):2:86"];
31->30;
30[label="30 initializer_type(56):2:86"];
29[label="29 assignment_expression_type(8):0:86"];
30->29;
29[label="29 assignment_expression_type(8):0:86"];
28[label="28 conditional_expression_type(15):0:86"];
29->28;
28[label="28 conditional_expression_type(15):0:86"];
27[label="27 logical_or_expression_type(62):0:86"];
28->27;
27[label="27 logical_or_expression_type(62):0:86"];
26[label="26 logical_and_expression_type(61):0:86"];
27->26;
26[label="26 logical_and_expression_type(61):0:86"];
25[label="25 inclusive_or_expression_type(52):0:86"];
26->25;
25[label="25 inclusive_or_expression_type(52):0:86"];
24[label="24 exclusive_or_expression_type(36):0:86"];
25->24;
24[label="24 exclusive_or_expression_type(36):0:86"];
23[label="23 and_expression_type(6):0:86"];
24->23;
23[label="23 and_expression_type(6):0:86"];
22[label="22 equality_expression_type(35):0:86"];
23->22;
22[label="22 equality_expression_type(35):0:86"];
21[label="21 relational_expression_type(74):0:86"];
22->21;
21[label="21 relational_expression_type(74):0:86"];
20[label="20 shift_expression_type(78):0:86"];
21->20;
20[label="20 shift_expression_type(78):0:86"];
19[label="19 additive_expression_type(4):0:86"];
20->19;
19[label="19 additive_expression_type(4):0:86"];
18[label="18 multiplicative_expression_type(65):0:86"];
19->18;
18[label="18 multiplicative_expression_type(65):0:86"];
17[label="17 cast_expression_type(13):0:86"];
18->17;
17[label="17 cast_expression_type(13):0:86"];
16[label="16 unary_expression_type(96):0:86"];
17->16;
16[label="16 unary_expression_type(96):0:86"];
15[label="15 postfix_expression_type(71):0:86"];
16->15;
15[label="15 postfix_expression_type(71):0:86"];
14[label="14 primary_expression_type(72):1:86"];
15->14;
14[label="14 primary_expression_type(72):1:86"];
13[label="13 constant_type(17):0:86"];
14->13;
13[label="13 constant_type(17):0:86"];
12[label="12 I_CONSTANT_type(48):-1:86:12"];
13->12;
12[label="12 I_CONSTANT_type(48):-1:86:12"];
63[label="63 block_item_type(12):0:86"];
35->63;
63[label="63 block_item_type(12):0:86"];
62[label="62 declaration_type(22):1:86"];
63->62;
62[label="62 declaration_type(22):1:86"];
38[label="38 declaration_specifiers_type(21):3:86"];
62->38;
38[label="38 declaration_specifiers_type(21):3:86"];
36[label="36 type_specifier_type(95):8:86"];
38->36;
36[label="36 type_specifier_type(95):8:86"];
61[label="61 init_declarator_list_type(53):0:86"];
62->61;
61[label="61 init_declarator_list_type(53):0:86"];
60[label="60 init_declarator_type(54):0:86"];
61->60;
60[label="60 init_declarator_type(54):0:86"];
40[label="40 declarator_type(23):1:86"];
60->40;
40[label="40 declarator_type(23):1:86"];
39[label="39 direct_declarator_type(28):0:86"];
40->39;
39[label="39 direct_declarator_type(28):0:86"];
37[label="37 not_know_type(0):-1:86:b"];
39->37;
37[label="37 not_know_type(0):-1:86:b"];
59[label="59 initializer_type(56):2:86"];
60->59;
59[label="59 initializer_type(56):2:86"];
58[label="58 assignment_expression_type(8):0:86"];
59->58;
58[label="58 assignment_expression_type(8):0:86"];
57[label="57 conditional_expression_type(15):0:86"];
58->57;
57[label="57 conditional_expression_type(15):0:86"];
56[label="56 logical_or_expression_type(62):0:86"];
57->56;
56[label="56 logical_or_expression_type(62):0:86"];
55[label="55 logical_and_expression_type(61):0:86"];
56->55;
55[label="55 logical_and_expression_type(61):0:86"];
54[label="54 inclusive_or_expression_type(52):0:86"];
55->54;
54[label="54 inclusive_or_expression_type(52):0:86"];
53[label="53 exclusive_or_expression_type(36):0:86"];
54->53;
53[label="53 exclusive_or_expression_type(36):0:86"];
52[label="52 and_expression_type(6):0:86"];
53->52;
52[label="52 and_expression_type(6):0:86"];
51[label="51 equality_expression_type(35):0:86"];
52->51;
51[label="51 equality_expression_type(35):0:86"];
50[label="50 relational_expression_type(74):0:86"];
51->50;
50[label="50 relational_expression_type(74):0:86"];
49[label="49 shift_expression_type(78):0:86"];
50->49;
49[label="49 shift_expression_type(78):0:86"];
48[label="48 additive_expression_type(4):0:86"];
49->48;
48[label="48 additive_expression_type(4):0:86"];
47[label="47 multiplicative_expression_type(65):0:86"];
48->47;
47[label="47 multiplicative_expression_type(65):0:86"];
46[label="46 cast_expression_type(13):0:86"];
47->46;
46[label="46 cast_expression_type(13):0:86"];
45[label="45 unary_expression_type(96):0:86"];
46->45;
45[label="45 unary_expression_type(96):0:86"];
44[label="44 postfix_expression_type(71):0:86"];
45->44;
44[label="44 postfix_expression_type(71):0:86"];
43[label="43 primary_expression_type(72):1:86"];
44->43;
43[label="43 primary_expression_type(72):1:86"];
42[label="42 constant_type(17):0:86"];
43->42;
42[label="42 constant_type(17):0:86"];
41[label="41 I_CONSTANT_type(48):-1:86:13"];
42->41;
41[label="41 I_CONSTANT_type(48):-1:86:13"];
85[label="85 block_item_type(12):1:86"];
35->85;
85[label="85 block_item_type(12):1:86"];
84[label="84 statement_type(80):5:86"];
85->84;
84[label="84 statement_type(80):5:86"];
83[label="83 jump_statement_type(58):4:86"];
84->83;
83[label="83 jump_statement_type(58):4:86"];
82[label="82 expression_type(38):0:86"];
83->82;
82[label="82 expression_type(38):0:86"];
81[label="81 assignment_expression_type(8):0:86"];
82->81;
81[label="81 assignment_expression_type(8):0:86"];
80[label="80 conditional_expression_type(15):0:86"];
81->80;
80[label="80 conditional_expression_type(15):0:86"];
79[label="79 logical_or_expression_type(62):0:86"];
80->79;
79[label="79 logical_or_expression_type(62):0:86"];
78[label="78 logical_and_expression_type(61):0:86"];
79->78;
78[label="78 logical_and_expression_type(61):0:86"];
77[label="77 inclusive_or_expression_type(52):0:86"];
78->77;
77[label="77 inclusive_or_expression_type(52):0:86"];
76[label="76 exclusive_or_expression_type(36):0:86"];
77->76;
76[label="76 exclusive_or_expression_type(36):0:86"];
75[label="75 and_expression_type(6):0:86"];
76->75;
75[label="75 and_expression_type(6):0:86"];
74[label="74 equality_expression_type(35):0:86"];
75->74;
74[label="74 equality_expression_type(35):0:86"];
73[label="73 relational_expression_type(74):0:86"];
74->73;
73[label="73 relational_expression_type(74):0:86"];
72[label="72 shift_expression_type(78):0:86"];
73->72;
72[label="72 shift_expression_type(78):0:86"];
71[label="71 additive_expression_type(4):0:86"];
72->71;
71[label="71 additive_expression_type(4):0:86"];
70[label="70 multiplicative_expression_type(65):0:86"];
71->70;
70[label="70 multiplicative_expression_type(65):0:86"];
69[label="69 cast_expression_type(13):0:86"];
70->69;
69[label="69 cast_expression_type(13):0:86"];
68[label="68 unary_expression_type(96):0:86"];
69->68;
68[label="68 unary_expression_type(96):0:86"];
67[label="67 postfix_expression_type(71):0:86"];
68->67;
67[label="67 postfix_expression_type(71):0:86"];
66[label="66 primary_expression_type(72):1:86"];
67->66;
66[label="66 primary_expression_type(72):1:86"];
65[label="65 constant_type(17):0:86"];
66->65;
65[label="65 constant_type(17):0:86"];
64[label="64 I_CONSTANT_type(48):-1:86:0"];
65->64;
64[label="64 I_CONSTANT_type(48):-1:86:0"];
140[label="140 external_declaration_type(39):0:0"];
89->140;
140[label="140 external_declaration_type(39):0:0"];
139[label="139 function_definition_type(42):1:0"];
140->139;
139[label="139 function_definition_type(42):1:0"];
92[label="92 declaration_specifiers_type(21):3:0"];
139->92;
92[label="92 declaration_specifiers_type(21):3:0"];
90[label="90 type_specifier_type(95):3:0"];
92->90;
90[label="90 type_specifier_type(95):3:0"];
114[label="114 declarator_type(23):1:0"];
139->114;
114[label="114 declarator_type(23):1:0"];
113[label="113 direct_declarator_type(28):13:0"];
114->113;
113[label="113 direct_declarator_type(28):13:0"];
108[label="108 direct_declarator_type(28):11:0"];
113->108;
108[label="108 direct_declarator_type(28):11:0"];
93[label="93 direct_declarator_type(28):0:0"];
108->93;
93[label="93 direct_declarator_type(28):0:0"];
91[label="91 not_know_type(0):-1:0:fun1"];
93->91;
91[label="91 not_know_type(0):-1:0:fun1"];
107[label="107 parameter_type_list_type(69):1:0"];
108->107;
107[label="107 parameter_type_list_type(69):1:0"];
100[label="100 parameter_list_type(68):0:0"];
107->100;
100[label="100 parameter_list_type(68):0:0"];
99[label="99 parameter_declaration_type(67):0:0"];
100->99;
99[label="99 parameter_declaration_type(67):0:0"];
96[label="96 declaration_specifiers_type(21):3:0"];
99->96;
96[label="96 declaration_specifiers_type(21):3:0"];
94[label="94 type_specifier_type(95):3:0"];
96->94;
94[label="94 type_specifier_type(95):3:0"];
98[label="98 declarator_type(23):1:0"];
99->98;
98[label="98 declarator_type(23):1:0"];
97[label="97 direct_declarator_type(28):0:0"];
98->97;
97[label="97 direct_declarator_type(28):0:0"];
95[label="95 not_know_type(0):-1:0:a"];
97->95;
95[label="95 not_know_type(0):-1:0:a"];
106[label="106 parameter_declaration_type(67):0:0"];
100->106;
106[label="106 parameter_declaration_type(67):0:0"];
103[label="103 declaration_specifiers_type(21):3:0"];
106->103;
103[label="103 declaration_specifiers_type(21):3:0"];
101[label="101 type_specifier_type(95):3:0"];
103->101;
101[label="101 type_specifier_type(95):3:0"];
105[label="105 declarator_type(23):1:0"];
106->105;
105[label="105 declarator_type(23):1:0"];
104[label="104 direct_declarator_type(28):0:0"];
105->104;
104[label="104 direct_declarator_type(28):0:0"];
102[label="102 not_know_type(0):-1:0:b"];
104->102;
102[label="102 not_know_type(0):-1:0:b"];
112[label="112 identifier_list_type(51):1:0"];
113->112;
112[label="112 identifier_list_type(51):1:0"];
110[label="110 identifier_list_type(51):0:0"];
112->110;
110[label="110 identifier_list_type(51):0:0"];
109[label="109 not_know_type(0):-1:0:a"];
110->109;
109[label="109 not_know_type(0):-1:0:a"];
111[label="111 not_know_type(0):-1:0:b"];
112->111;
111[label="111 not_know_type(0):-1:0:b"];
138[label="138 compound_statement_type(14):1:138"];
139->138;
138[label="138 compound_statement_type(14):1:138"];
137[label="137 block_item_list_type(11):0:138"];
138->137;
137[label="137 block_item_list_type(11):0:138"];
136[label="136 block_item_type(12):1:138"];
137->136;
136[label="136 block_item_type(12):1:138"];
135[label="135 statement_type(80):5:138"];
136->135;
135[label="135 statement_type(80):5:138"];
134[label="134 jump_statement_type(58):4:138"];
135->134;
134[label="134 jump_statement_type(58):4:138"];
133[label="133 expression_type(38):0:138"];
134->133;
133[label="133 expression_type(38):0:138"];
132[label="132 assignment_expression_type(8):0:138"];
133->132;
132[label="132 assignment_expression_type(8):0:138"];
131[label="131 conditional_expression_type(15):0:138"];
132->131;
131[label="131 conditional_expression_type(15):0:138"];
130[label="130 logical_or_expression_type(62):0:138"];
131->130;
130[label="130 logical_or_expression_type(62):0:138"];
129[label="129 logical_and_expression_type(61):0:138"];
130->129;
129[label="129 logical_and_expression_type(61):0:138"];
128[label="128 inclusive_or_expression_type(52):0:138"];
129->128;
128[label="128 inclusive_or_expression_type(52):0:138"];
127[label="127 exclusive_or_expression_type(36):0:138"];
128->127;
127[label="127 exclusive_or_expression_type(36):0:138"];
126[label="126 and_expression_type(6):0:138"];
127->126;
126[label="126 and_expression_type(6):0:138"];
125[label="125 equality_expression_type(35):0:138"];
126->125;
125[label="125 equality_expression_type(35):0:138"];
124[label="124 relational_expression_type(74):0:138"];
125->124;
124[label="124 relational_expression_type(74):0:138"];
123[label="123 shift_expression_type(78):0:138"];
124->123;
123[label="123 shift_expression_type(78):0:138"];
122[label="122 additive_expression_type(4):0:138"];
123->122;
122[label="122 additive_expression_type(4):0:138"];
121[label="121 multiplicative_expression_type(65):0:138"];
122->121;
121[label="121 multiplicative_expression_type(65):0:138"];
120[label="120 cast_expression_type(13):0:138"];
121->120;
120[label="120 cast_expression_type(13):0:138"];
119[label="119 unary_expression_type(96):0:138"];
120->119;
119[label="119 unary_expression_type(96):0:138"];
118[label="118 postfix_expression_type(71):0:138"];
119->118;
118[label="118 postfix_expression_type(71):0:138"];
117[label="117 primary_expression_type(72):1:138"];
118->117;
117[label="117 primary_expression_type(72):1:138"];
116[label="116 constant_type(17):0:138"];
117->116;
116[label="116 constant_type(17):0:138"];
115[label="115 I_CONSTANT_type(48):-1:138:0"];
116->115;
115[label="115 I_CONSTANT_type(48):-1:138:0"];
}
