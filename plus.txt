need graph, name:plus.dot
before initialize compiler state
81818181: node_table:b75c4008
81818181: symbol_table:b7583008
lib/compiler_state.c:151 87da170
after  initialize compiler state
================compiler_state start===================
c_file_str:plus.c
symbol_max_number:65536
symbol_number:0
node_max_number:65536
node_number:0
need_dot_file:1
dot_file_str:plus.dot
need_infor:0
symbol_table:87da170
node_table:b75c4008
declaration_secifiers_table:87da170
================compiler_state end ====================
type_specifier: INT
!!!main
291:yylineno:2
check_identifier end
declaration_specifiers: type_specifier
direct_declarator: IDENTIFIER
direct_declarator: direct_declarator '(' ')'
stack: 1 0 
declarator: direct_declarator
type_specifier: INT
!!!a
291:yylineno:4
check_identifier end
declaration_specifiers: type_specifier
direct_declarator: IDENTIFIER
declarator: direct_declarator
!!!12
constant: I_CONSTANT
primary_expression: constant
postfix_expression: primary_expression
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
initializer: assignment_expression
init_declarator: declarator '=' initializer
init_declarator_list: init_declarator
declaration: declaration_specifiers init_declarator_list ';'
block_item: declaration
block_item_list: block_item
!!!a
291:yylineno:5
check_identifier end
primary_expression: IDENTIFIER
postfix_expression: primary_expression
unary_expression: postfix_expression
unary_expression: INC_OP unary_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
expression: assignment_expression
expression_statement: expression ';'
statement: expression_statement
block_item: statement
block_item_list: block_item_list block_item
!!!a
291:yylineno:6
check_identifier end
primary_expression: IDENTIFIER
postfix_expression: primary_expression
postfix_expression: postfix_expression INC_OP
unary_expression: postfix_expression
cast_expression: unary_expression
multiplicative_expression: cast_expression
additive_expression: multiplicative_expression
shift_expression: additive_expression
relational_expression: shift_expression
equality_expression: relational_expression
and_expression: equality_expression
exclusive_or_expression: and_expression
inclusive_or_expression: exclusive_or_expression
logical_and_expression: inclusive_or_expression
logical_or_expression: logical_and_expression
conditional_expression: logical_or_expression
assignment_expression: conditional_expression
expression: assignment_expression
expression_statement: expression ';'
statement: expression_statement
block_item: statement
block_item_list: block_item_list block_item
stack: 0 
compound_statement(id:80): '{' block_item_list '}'
function_defination: declaration_specifiers declarator compound_statement
cbison.y:1624 start
deal_type_specifier node_inrule_num 3
111
333 0
222
0318: 32
deal_type_specifier node_inrule_num 3
right!!!
node_index:29
888
node_index:29
999
333 1
333 2
cbison.y:1624 end
external_declaration: function_definition
-------------------------translation_unit: external_declaration
----------print_node_table:
node_index node_parent node_child_num node_type_str node_symbol_index node_line_num node_compound_id
id(0):type(type_specifier_type[95]):index(0):parent(2):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(-1):child_num(0):inrule_num(3):symbol_index([3]):infor_index(-1):line_num(2):compound_id(0):

id(1):type(not_know_type[0]):index(1):parent(3):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(-1):child_num(0):inrule_num(-1):symbol_index(main[0]):infor_index(-1):line_num(2):compound_id(0):

id(2):type(declaration_specifiers_type[21]):index(2):parent(80):left_brother(-1):right_brother(5):brother_num(2):brother_seq(0):first_child(0):child_num(1):inrule_num(3):symbol_index([3]):infor_index(-1):line_num(2):compound_id(0):

id(3):type(direct_declarator_type[28]):index(3):parent(4):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(1):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(2):compound_id(0):

id(4):type(direct_declarator_type[28]):index(4):parent(5):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(3):child_num(1):inrule_num(12):symbol_index([12]):infor_index(-1):line_num(2):compound_id(0):

id(5):type(declarator_type[23]):index(5):parent(80):left_brother(2):right_brother(79):brother_num(3):brother_seq(1):first_child(4):child_num(1):inrule_num(1):symbol_index([1]):infor_index(-1):line_num(3):compound_id(0):

id(6):type(type_specifier_type[95]):index(6):parent(8):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(-1):child_num(0):inrule_num(3):symbol_index([3]):infor_index(-1):line_num(4):compound_id(79):

id(7):type(not_know_type[0]):index(7):parent(9):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(-1):child_num(0):inrule_num(-1):symbol_index(a[1]):infor_index(-1):line_num(4):compound_id(79):

id(8):type(declaration_specifiers_type[21]):index(8):parent(32):left_brother(-1):right_brother(31):brother_num(2):brother_seq(0):first_child(6):child_num(1):inrule_num(3):symbol_index([3]):infor_index(-1):line_num(4):compound_id(79):

id(9):type(direct_declarator_type[28]):index(9):parent(10):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(7):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(10):type(declarator_type[23]):index(10):parent(30):left_brother(-1):right_brother(29):brother_num(2):brother_seq(0):first_child(9):child_num(1):inrule_num(1):symbol_index([1]):infor_index(-1):line_num(4):compound_id(79):

id(11):type(I_CONSTANT_type[48]):index(11):parent(12):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(-1):child_num(0):inrule_num(-1):symbol_index(12[2]):infor_index(-1):line_num(4):compound_id(79):

id(12):type(constant_type[17]):index(12):parent(13):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(11):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(13):type(primary_expression_type[72]):index(13):parent(14):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(12):child_num(1):inrule_num(1):symbol_index([1]):infor_index(-1):line_num(4):compound_id(79):

id(14):type(postfix_expression_type[71]):index(14):parent(15):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(13):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(15):type(unary_expression_type[96]):index(15):parent(16):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(14):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(16):type(cast_expression_type[13]):index(16):parent(17):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(15):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(17):type(multiplicative_expression_type[65]):index(17):parent(18):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(16):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(18):type(additive_expression_type[4]):index(18):parent(19):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(17):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(19):type(shift_expression_type[78]):index(19):parent(20):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(18):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(20):type(relational_expression_type[74]):index(20):parent(21):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(19):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(21):type(equality_expression_type[35]):index(21):parent(22):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(20):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(22):type(and_expression_type[6]):index(22):parent(23):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(21):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(23):type(exclusive_or_expression_type[36]):index(23):parent(24):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(22):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(24):type(inclusive_or_expression_type[52]):index(24):parent(25):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(23):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(25):type(logical_and_expression_type[61]):index(25):parent(26):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(24):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(26):type(logical_or_expression_type[62]):index(26):parent(27):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(25):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(27):type(conditional_expression_type[15]):index(27):parent(28):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(26):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(28):type(assignment_expression_type[8]):index(28):parent(29):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(27):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(29):type(initializer_type[56]):index(29):parent(30):left_brother(10):right_brother(-1):brother_num(2):brother_seq(1):first_child(28):child_num(1):inrule_num(2):symbol_index([2]):infor_index(-1):line_num(4):compound_id(79):

id(30):type(init_declarator_type[54]):index(30):parent(31):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(10):child_num(2):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(31):type(init_declarator_list_type[53]):index(31):parent(32):left_brother(8):right_brother(-1):brother_num(2):brother_seq(1):first_child(30):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(32):type(declaration_type[22]):index(32):parent(33):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(8):child_num(2):inrule_num(1):symbol_index([1]):infor_index(-1):line_num(4):compound_id(79):

id(33):type(block_item_type[12]):index(33):parent(34):left_brother(-1):right_brother(56):brother_num(2):brother_seq(0):first_child(32):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(34):type(block_item_list_type[11]):index(34):parent(79):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(33):child_num(3):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(4):compound_id(79):

id(35):type(not_know_type[0]):index(35):parent(36):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(-1):child_num(0):inrule_num(-1):symbol_index(a[3]):infor_index(-1):line_num(5):compound_id(79):

id(36):type(primary_expression_type[72]):index(36):parent(37):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(35):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(37):type(postfix_expression_type[71]):index(37):parent(38):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(36):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(38):type(unary_expression_type[96]):index(38):parent(39):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(37):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(39):type(unary_expression_type[96]):index(39):parent(40):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(38):child_num(1):inrule_num(1):symbol_index([1]):infor_index(-1):line_num(5):compound_id(79):

id(40):type(cast_expression_type[13]):index(40):parent(41):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(39):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(41):type(multiplicative_expression_type[65]):index(41):parent(42):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(40):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(42):type(additive_expression_type[4]):index(42):parent(43):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(41):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(43):type(shift_expression_type[78]):index(43):parent(44):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(42):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(44):type(relational_expression_type[74]):index(44):parent(45):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(43):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(45):type(equality_expression_type[35]):index(45):parent(46):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(44):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(46):type(and_expression_type[6]):index(46):parent(47):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(45):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(47):type(exclusive_or_expression_type[36]):index(47):parent(48):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(46):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(48):type(inclusive_or_expression_type[52]):index(48):parent(49):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(47):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(49):type(logical_and_expression_type[61]):index(49):parent(50):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(48):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(50):type(logical_or_expression_type[62]):index(50):parent(51):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(49):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(51):type(conditional_expression_type[15]):index(51):parent(52):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(50):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(52):type(assignment_expression_type[8]):index(52):parent(53):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(51):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(53):type(expression_type[38]):index(53):parent(54):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(52):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(5):compound_id(79):

id(54):type(expression_statement_type[37]):index(54):parent(55):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(53):child_num(1):inrule_num(1):symbol_index([1]):infor_index(-1):line_num(5):compound_id(79):

id(55):type(statement_type[80]):index(55):parent(56):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(54):child_num(1):inrule_num(2):symbol_index([2]):infor_index(-1):line_num(5):compound_id(79):

id(56):type(block_item_type[12]):index(56):parent(34):left_brother(33):right_brother(78):brother_num(3):brother_seq(1):first_child(55):child_num(1):inrule_num(1):symbol_index([1]):infor_index(-1):line_num(5):compound_id(79):

id(57):type(not_know_type[0]):index(57):parent(58):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(-1):child_num(0):inrule_num(-1):symbol_index(a[4]):infor_index(-1):line_num(6):compound_id(79):

id(58):type(primary_expression_type[72]):index(58):parent(59):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(57):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(59):type(postfix_expression_type[71]):index(59):parent(60):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(58):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(60):type(postfix_expression_type[71]):index(60):parent(61):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(59):child_num(1):inrule_num(6):symbol_index([6]):infor_index(-1):line_num(6):compound_id(79):

id(61):type(unary_expression_type[96]):index(61):parent(62):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(60):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(62):type(cast_expression_type[13]):index(62):parent(63):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(61):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(63):type(multiplicative_expression_type[65]):index(63):parent(64):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(62):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(64):type(additive_expression_type[4]):index(64):parent(65):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(63):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(65):type(shift_expression_type[78]):index(65):parent(66):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(64):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(66):type(relational_expression_type[74]):index(66):parent(67):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(65):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(67):type(equality_expression_type[35]):index(67):parent(68):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(66):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(68):type(and_expression_type[6]):index(68):parent(69):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(67):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(69):type(exclusive_or_expression_type[36]):index(69):parent(70):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(68):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(70):type(inclusive_or_expression_type[52]):index(70):parent(71):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(69):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(71):type(logical_and_expression_type[61]):index(71):parent(72):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(70):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(72):type(logical_or_expression_type[62]):index(72):parent(73):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(71):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(73):type(conditional_expression_type[15]):index(73):parent(74):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(72):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(74):type(assignment_expression_type[8]):index(74):parent(75):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(73):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(75):type(expression_type[38]):index(75):parent(76):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(74):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(6):compound_id(79):

id(76):type(expression_statement_type[37]):index(76):parent(77):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(75):child_num(1):inrule_num(1):symbol_index([1]):infor_index(-1):line_num(6):compound_id(79):

id(77):type(statement_type[80]):index(77):parent(78):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(76):child_num(1):inrule_num(2):symbol_index([2]):infor_index(-1):line_num(6):compound_id(79):

id(78):type(block_item_type[12]):index(78):parent(34):left_brother(56):right_brother(-1):brother_num(3):brother_seq(2):first_child(77):child_num(1):inrule_num(1):symbol_index([1]):infor_index(-1):line_num(6):compound_id(79):

id(79):type(compound_statement_type[14]):index(79):parent(80):left_brother(5):right_brother(-1):brother_num(3):brother_seq(2):first_child(34):child_num(1):inrule_num(1):symbol_index([1]):infor_index(-1):line_num(7):compound_id(79):

id(80):type(function_definition_type[42]):index(80):parent(81):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(2):child_num(3):inrule_num(1):symbol_index([1]):infor_index(-1):line_num(7):compound_id(0):

id(81):type(external_declaration_type[39]):index(81):parent(82):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(80):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(7):compound_id(0):

id(82):type(translation_unit_type[91]):index(82):parent(-1):left_brother(-1):right_brother(-1):brother_num(1):brother_seq(0):first_child(81):child_num(1):inrule_num(0):symbol_index([0]):infor_index(-1):line_num(7):compound_id(0):

----------print_node_table!
+translation_unit_type node_id:82 child_number:1 inrule_num:0 line_num:7
 +external_declaration_type node_id:81 child_number:1 inrule_num:0 line_num:7
  +function_definition_type node_id:80 child_number:3 inrule_num:1 line_num:7
   +declaration_specifiers_type node_id:2 child_number:1 inrule_num:3 line_num:2
    +type_specifier_type node_id:0 child_number:0 inrule_num:3 line_num:2
   +declarator_type node_id:5 child_number:1 inrule_num:1 line_num:3
    +direct_declarator_type node_id:4 child_number:1 inrule_num:12 line_num:2
     +direct_declarator_type node_id:3 child_number:1 inrule_num:0 line_num:2
      +not_know_type node_id:1 child_number:0 inrule_num:-1 line_num:2
 main
   +compound_statement_type node_id:79 child_number:1 inrule_num:1 line_num:7
    +block_item_list_type node_id:34 child_number:3 inrule_num:0 line_num:4
     +block_item_type node_id:33 child_number:1 inrule_num:0 line_num:4
      +declaration_type node_id:32 child_number:2 inrule_num:1 line_num:4
       +declaration_specifiers_type node_id:8 child_number:1 inrule_num:3 line_num:4
        +type_specifier_type node_id:6 child_number:0 inrule_num:3 line_num:4
       +init_declarator_list_type node_id:31 child_number:1 inrule_num:0 line_num:4
        +init_declarator_type node_id:30 child_number:2 inrule_num:0 line_num:4
         +declarator_type node_id:10 child_number:1 inrule_num:1 line_num:4
          +direct_declarator_type node_id:9 child_number:1 inrule_num:0 line_num:4
           +not_know_type node_id:7 child_number:0 inrule_num:-1 line_num:4
 a
         +initializer_type node_id:29 child_number:1 inrule_num:2 line_num:4
          +assignment_expression_type node_id:28 child_number:1 inrule_num:0 line_num:4
           +conditional_expression_type node_id:27 child_number:1 inrule_num:0 line_num:4
            +logical_or_expression_type node_id:26 child_number:1 inrule_num:0 line_num:4
             +logical_and_expression_type node_id:25 child_number:1 inrule_num:0 line_num:4
              +inclusive_or_expression_type node_id:24 child_number:1 inrule_num:0 line_num:4
               +exclusive_or_expression_type node_id:23 child_number:1 inrule_num:0 line_num:4
                +and_expression_type node_id:22 child_number:1 inrule_num:0 line_num:4
                 +equality_expression_type node_id:21 child_number:1 inrule_num:0 line_num:4
                  +relational_expression_type node_id:20 child_number:1 inrule_num:0 line_num:4
                   +shift_expression_type node_id:19 child_number:1 inrule_num:0 line_num:4
                    +additive_expression_type node_id:18 child_number:1 inrule_num:0 line_num:4
                     +multiplicative_expression_type node_id:17 child_number:1 inrule_num:0 line_num:4
                      +cast_expression_type node_id:16 child_number:1 inrule_num:0 line_num:4
                       +unary_expression_type node_id:15 child_number:1 inrule_num:0 line_num:4
                        +postfix_expression_type node_id:14 child_number:1 inrule_num:0 line_num:4
                         +primary_expression_type node_id:13 child_number:1 inrule_num:1 line_num:4
                          +constant_type node_id:12 child_number:1 inrule_num:0 line_num:4
                           +I_CONSTANT_type node_id:11 child_number:0 inrule_num:-1 line_num:4
     +block_item_type node_id:56 child_number:1 inrule_num:1 line_num:5
      +statement_type node_id:55 child_number:1 inrule_num:2 line_num:5
       +expression_statement_type node_id:54 child_number:1 inrule_num:1 line_num:5
        +expression_type node_id:53 child_number:1 inrule_num:0 line_num:5
         +assignment_expression_type node_id:52 child_number:1 inrule_num:0 line_num:5
          +conditional_expression_type node_id:51 child_number:1 inrule_num:0 line_num:5
           +logical_or_expression_type node_id:50 child_number:1 inrule_num:0 line_num:5
            +logical_and_expression_type node_id:49 child_number:1 inrule_num:0 line_num:5
             +inclusive_or_expression_type node_id:48 child_number:1 inrule_num:0 line_num:5
              +exclusive_or_expression_type node_id:47 child_number:1 inrule_num:0 line_num:5
               +and_expression_type node_id:46 child_number:1 inrule_num:0 line_num:5
                +equality_expression_type node_id:45 child_number:1 inrule_num:0 line_num:5
                 +relational_expression_type node_id:44 child_number:1 inrule_num:0 line_num:5
                  +shift_expression_type node_id:43 child_number:1 inrule_num:0 line_num:5
                   +additive_expression_type node_id:42 child_number:1 inrule_num:0 line_num:5
                    +multiplicative_expression_type node_id:41 child_number:1 inrule_num:0 line_num:5
                     +cast_expression_type node_id:40 child_number:1 inrule_num:0 line_num:5
                      +unary_expression_type node_id:39 child_number:1 inrule_num:1 line_num:5
                       +unary_expression_type node_id:38 child_number:1 inrule_num:0 line_num:5
                        +postfix_expression_type node_id:37 child_number:1 inrule_num:0 line_num:5
                         +primary_expression_type node_id:36 child_number:1 inrule_num:0 line_num:5
                          +not_know_type node_id:35 child_number:0 inrule_num:-1 line_num:5
 a
     +block_item_type node_id:78 child_number:1 inrule_num:1 line_num:6
      +statement_type node_id:77 child_number:1 inrule_num:2 line_num:6
       +expression_statement_type node_id:76 child_number:1 inrule_num:1 line_num:6
        +expression_type node_id:75 child_number:1 inrule_num:0 line_num:6
         +assignment_expression_type node_id:74 child_number:1 inrule_num:0 line_num:6
          +conditional_expression_type node_id:73 child_number:1 inrule_num:0 line_num:6
           +logical_or_expression_type node_id:72 child_number:1 inrule_num:0 line_num:6
            +logical_and_expression_type node_id:71 child_number:1 inrule_num:0 line_num:6
             +inclusive_or_expression_type node_id:70 child_number:1 inrule_num:0 line_num:6
              +exclusive_or_expression_type node_id:69 child_number:1 inrule_num:0 line_num:6
               +and_expression_type node_id:68 child_number:1 inrule_num:0 line_num:6
                +equality_expression_type node_id:67 child_number:1 inrule_num:0 line_num:6
                 +relational_expression_type node_id:66 child_number:1 inrule_num:0 line_num:6
                  +shift_expression_type node_id:65 child_number:1 inrule_num:0 line_num:6
                   +additive_expression_type node_id:64 child_number:1 inrule_num:0 line_num:6
                    +multiplicative_expression_type node_id:63 child_number:1 inrule_num:0 line_num:6
                     +cast_expression_type node_id:62 child_number:1 inrule_num:0 line_num:6
                      +unary_expression_type node_id:61 child_number:1 inrule_num:0 line_num:6
                       +postfix_expression_type node_id:60 child_number:1 inrule_num:6 line_num:6
                        +postfix_expression_type node_id:59 child_number:1 inrule_num:0 line_num:6
                         +primary_expression_type node_id:58 child_number:1 inrule_num:0 line_num:6
                          +not_know_type node_id:57 child_number:0 inrule_num:-1 line_num:6
 a
---------------------symbol_table:
id(0):name(main):name_len(4):type(not_know_type[0]):file((null)):file_len(0):line_num:(2):in_which_node(1):
id(1):name(a):name_len(1):type(not_know_type[0]):file((null)):file_len(0):line_num:(4):in_which_node(7):
id(2):name(12):name_len(2):type(I_CONSTANT_type[48]):file((null)):file_len(0):line_num:(4):in_which_node(11):
id(3):name(a):name_len(1):type(not_know_type[0]):file((null)):file_len(0):line_num:(5):in_which_node(35):
id(4):name(a):name_len(1):type(not_know_type[0]):file((null)):file_len(0):line_num:(6):in_which_node(57):
---------------------symbol_table!
1 has father 0
stack: 0 


============================================
= print declaration_specifiers_table       =
============================================
declaration_specifiers_table[0] start
index:0
storage_class_specifier none(0x00000000)
type_specifier(0x00000003): signed default int index(0)
type_qualifier(0x00000000): 
function_specifier(0x00000000): 
declaration_specifiers_table[0] end
--------------------------------------------
declaration_specifiers_table[1] start
index:1
storage_class_specifier none(0x00000000)
type_specifier(0x00000003): signed default int index(0)
type_qualifier(0x00000000): 
function_specifier(0x00000000): 
declaration_specifiers_table[1] end
--------------------------------------------






============================================
= declarator_table                         =
============================================
declarator_table_num:2
--------------------------------------------
index:0 node_index:5 pointer_index:-1 direct_declarator_index:0
--------------------------------------------
index:1 node_index:10 pointer_index:-1 direct_declarator_index:1
--------------------------------------------
--------------------------------------------



============================================
= print direct_declarator_table            =
============================================
index:0
is_IDENTIFIER:0
node_index:-1
number:1
0. category:12 index1:0 index2:0
--------------------------------------------
index:1
is_IDENTIFIER:0
node_index:-1
number:0
--------------------------------------------






============================================
= print compound_statement_table           =
============================================
index:0 node_index:79 block_item_num:3
is_statement:0 node_index:33 index:0
is_statement:1 node_index:56 index:1
is_statement:1 node_index:78 index:2
--------------------------------------------






============================================
= block_item_table               =
============================================
initializer_block_item_table_num:3
--------------------------------------------
index:0 node_index:33 is_statement:0 data_index:0 child_index:32 block_item_next_index:1
--------------------------------------------
index:1 node_index:56 is_statement:1 data_index:-1 child_index:55 block_item_next_index:2
--------------------------------------------
index:2 node_index:78 is_statement:1 data_index:-1 child_index:77 block_item_next_index:-1
--------------------------------------------
--------------------------------------------



============================================
= declaration_table                        =
============================================
declaration_table_num:1
--------------------------------------------
index:0 node_index:32 declaration_specifiers_index:1 static_assert_declaration_index:-1         init_declarator_num:1 init_declarator_infor->next_id:0
--------------------------------------------
--------------------------------------------



============================================
= init_declarator_table                    =
============================================
init_declarator_table_num:1
--------------------------------------------
init_declarator_infor index:0 node_index:30 declarator_index:1 initializer_index:0 next:-1
--------------------------------------------
--------------------------------------------



============================================
= initializer_table                        =
============================================
initializer_table_num:1
--------------------------------------------
index:0 node_index:29 is_assignment_expression:1 data_index:0
--------------------------------------------
--------------------------------------------



============================================
= initializer_list_table                   =
============================================
initializer_list_table_num:0
--------------------------------------------
--------------------------------------------



============================================
= initializer_list_one_table               =
============================================
initializer_list_one_table_num:0
--------------------------------------------
--------------------------------------------

