digraph G{
82[label="82 translation_unit_type(91):0:0"];
81[label="81 external_declaration_type(39):0:0"];
82->81;
81[label="81 external_declaration_type(39):0:0"];
80[label="80 function_definition_type(42):1:0"];
81->80;
80[label="80 function_definition_type(42):1:0"];
2[label="2 declaration_specifiers_type(21):3:0"];
80->2;
2[label="2 declaration_specifiers_type(21):3:0"];
0[label="0 type_specifier_type(95):3:0"];
2->0;
0[label="0 type_specifier_type(95):3:0"];
5[label="5 declarator_type(23):1:0"];
80->5;
5[label="5 declarator_type(23):1:0"];
4[label="4 direct_declarator_type(28):12:0"];
5->4;
4[label="4 direct_declarator_type(28):12:0"];
3[label="3 direct_declarator_type(28):0:0"];
4->3;
3[label="3 direct_declarator_type(28):0:0"];
1[label="1 not_know_type(0):-1:0:main"];
3->1;
1[label="1 not_know_type(0):-1:0:main"];
79[label="79 compound_statement_type(14):1:79"];
80->79;
79[label="79 compound_statement_type(14):1:79"];
34[label="34 block_item_list_type(11):0:79"];
79->34;
34[label="34 block_item_list_type(11):0:79"];
33[label="33 block_item_type(12):0:79"];
34->33;
33[label="33 block_item_type(12):0:79"];
32[label="32 declaration_type(22):1:79"];
33->32;
32[label="32 declaration_type(22):1:79"];
8[label="8 declaration_specifiers_type(21):3:79"];
32->8;
8[label="8 declaration_specifiers_type(21):3:79"];
6[label="6 type_specifier_type(95):3:79"];
8->6;
6[label="6 type_specifier_type(95):3:79"];
31[label="31 init_declarator_list_type(53):0:79"];
32->31;
31[label="31 init_declarator_list_type(53):0:79"];
30[label="30 init_declarator_type(54):0:79"];
31->30;
30[label="30 init_declarator_type(54):0:79"];
10[label="10 declarator_type(23):1:79"];
30->10;
10[label="10 declarator_type(23):1:79"];
9[label="9 direct_declarator_type(28):0:79"];
10->9;
9[label="9 direct_declarator_type(28):0:79"];
7[label="7 not_know_type(0):-1:79:a"];
9->7;
7[label="7 not_know_type(0):-1:79:a"];
29[label="29 initializer_type(56):2:79"];
30->29;
29[label="29 initializer_type(56):2:79"];
28[label="28 assignment_expression_type(8):0:79"];
29->28;
28[label="28 assignment_expression_type(8):0:79"];
27[label="27 conditional_expression_type(15):0:79"];
28->27;
27[label="27 conditional_expression_type(15):0:79"];
26[label="26 logical_or_expression_type(62):0:79"];
27->26;
26[label="26 logical_or_expression_type(62):0:79"];
25[label="25 logical_and_expression_type(61):0:79"];
26->25;
25[label="25 logical_and_expression_type(61):0:79"];
24[label="24 inclusive_or_expression_type(52):0:79"];
25->24;
24[label="24 inclusive_or_expression_type(52):0:79"];
23[label="23 exclusive_or_expression_type(36):0:79"];
24->23;
23[label="23 exclusive_or_expression_type(36):0:79"];
22[label="22 and_expression_type(6):0:79"];
23->22;
22[label="22 and_expression_type(6):0:79"];
21[label="21 equality_expression_type(35):0:79"];
22->21;
21[label="21 equality_expression_type(35):0:79"];
20[label="20 relational_expression_type(74):0:79"];
21->20;
20[label="20 relational_expression_type(74):0:79"];
19[label="19 shift_expression_type(78):0:79"];
20->19;
19[label="19 shift_expression_type(78):0:79"];
18[label="18 additive_expression_type(4):0:79"];
19->18;
18[label="18 additive_expression_type(4):0:79"];
17[label="17 multiplicative_expression_type(65):0:79"];
18->17;
17[label="17 multiplicative_expression_type(65):0:79"];
16[label="16 cast_expression_type(13):0:79"];
17->16;
16[label="16 cast_expression_type(13):0:79"];
15[label="15 unary_expression_type(96):0:79"];
16->15;
15[label="15 unary_expression_type(96):0:79"];
14[label="14 postfix_expression_type(71):0:79"];
15->14;
14[label="14 postfix_expression_type(71):0:79"];
13[label="13 primary_expression_type(72):1:79"];
14->13;
13[label="13 primary_expression_type(72):1:79"];
12[label="12 constant_type(17):0:79"];
13->12;
12[label="12 constant_type(17):0:79"];
11[label="11 I_CONSTANT_type(48):-1:79:12"];
12->11;
11[label="11 I_CONSTANT_type(48):-1:79:12"];
56[label="56 block_item_type(12):1:79"];
34->56;
56[label="56 block_item_type(12):1:79"];
55[label="55 statement_type(80):2:79"];
56->55;
55[label="55 statement_type(80):2:79"];
54[label="54 expression_statement_type(37):1:79"];
55->54;
54[label="54 expression_statement_type(37):1:79"];
53[label="53 expression_type(38):0:79"];
54->53;
53[label="53 expression_type(38):0:79"];
52[label="52 assignment_expression_type(8):0:79"];
53->52;
52[label="52 assignment_expression_type(8):0:79"];
51[label="51 conditional_expression_type(15):0:79"];
52->51;
51[label="51 conditional_expression_type(15):0:79"];
50[label="50 logical_or_expression_type(62):0:79"];
51->50;
50[label="50 logical_or_expression_type(62):0:79"];
49[label="49 logical_and_expression_type(61):0:79"];
50->49;
49[label="49 logical_and_expression_type(61):0:79"];
48[label="48 inclusive_or_expression_type(52):0:79"];
49->48;
48[label="48 inclusive_or_expression_type(52):0:79"];
47[label="47 exclusive_or_expression_type(36):0:79"];
48->47;
47[label="47 exclusive_or_expression_type(36):0:79"];
46[label="46 and_expression_type(6):0:79"];
47->46;
46[label="46 and_expression_type(6):0:79"];
45[label="45 equality_expression_type(35):0:79"];
46->45;
45[label="45 equality_expression_type(35):0:79"];
44[label="44 relational_expression_type(74):0:79"];
45->44;
44[label="44 relational_expression_type(74):0:79"];
43[label="43 shift_expression_type(78):0:79"];
44->43;
43[label="43 shift_expression_type(78):0:79"];
42[label="42 additive_expression_type(4):0:79"];
43->42;
42[label="42 additive_expression_type(4):0:79"];
41[label="41 multiplicative_expression_type(65):0:79"];
42->41;
41[label="41 multiplicative_expression_type(65):0:79"];
40[label="40 cast_expression_type(13):0:79"];
41->40;
40[label="40 cast_expression_type(13):0:79"];
39[label="39 unary_expression_type(96):1:79"];
40->39;
39[label="39 unary_expression_type(96):1:79"];
38[label="38 unary_expression_type(96):0:79"];
39->38;
38[label="38 unary_expression_type(96):0:79"];
37[label="37 postfix_expression_type(71):0:79"];
38->37;
37[label="37 postfix_expression_type(71):0:79"];
36[label="36 primary_expression_type(72):0:79"];
37->36;
36[label="36 primary_expression_type(72):0:79"];
35[label="35 not_know_type(0):-1:79:a"];
36->35;
35[label="35 not_know_type(0):-1:79:a"];
78[label="78 block_item_type(12):1:79"];
34->78;
78[label="78 block_item_type(12):1:79"];
77[label="77 statement_type(80):2:79"];
78->77;
77[label="77 statement_type(80):2:79"];
76[label="76 expression_statement_type(37):1:79"];
77->76;
76[label="76 expression_statement_type(37):1:79"];
75[label="75 expression_type(38):0:79"];
76->75;
75[label="75 expression_type(38):0:79"];
74[label="74 assignment_expression_type(8):0:79"];
75->74;
74[label="74 assignment_expression_type(8):0:79"];
73[label="73 conditional_expression_type(15):0:79"];
74->73;
73[label="73 conditional_expression_type(15):0:79"];
72[label="72 logical_or_expression_type(62):0:79"];
73->72;
72[label="72 logical_or_expression_type(62):0:79"];
71[label="71 logical_and_expression_type(61):0:79"];
72->71;
71[label="71 logical_and_expression_type(61):0:79"];
70[label="70 inclusive_or_expression_type(52):0:79"];
71->70;
70[label="70 inclusive_or_expression_type(52):0:79"];
69[label="69 exclusive_or_expression_type(36):0:79"];
70->69;
69[label="69 exclusive_or_expression_type(36):0:79"];
68[label="68 and_expression_type(6):0:79"];
69->68;
68[label="68 and_expression_type(6):0:79"];
67[label="67 equality_expression_type(35):0:79"];
68->67;
67[label="67 equality_expression_type(35):0:79"];
66[label="66 relational_expression_type(74):0:79"];
67->66;
66[label="66 relational_expression_type(74):0:79"];
65[label="65 shift_expression_type(78):0:79"];
66->65;
65[label="65 shift_expression_type(78):0:79"];
64[label="64 additive_expression_type(4):0:79"];
65->64;
64[label="64 additive_expression_type(4):0:79"];
63[label="63 multiplicative_expression_type(65):0:79"];
64->63;
63[label="63 multiplicative_expression_type(65):0:79"];
62[label="62 cast_expression_type(13):0:79"];
63->62;
62[label="62 cast_expression_type(13):0:79"];
61[label="61 unary_expression_type(96):0:79"];
62->61;
61[label="61 unary_expression_type(96):0:79"];
60[label="60 postfix_expression_type(71):6:79"];
61->60;
60[label="60 postfix_expression_type(71):6:79"];
59[label="59 postfix_expression_type(71):0:79"];
60->59;
59[label="59 postfix_expression_type(71):0:79"];
58[label="58 primary_expression_type(72):0:79"];
59->58;
58[label="58 primary_expression_type(72):0:79"];
57[label="57 not_know_type(0):-1:79:a"];
58->57;
57[label="57 not_know_type(0):-1:79:a"];
}
